// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.get('playerHand').on('stand', (function(_this) {
        return function() {
          return _this.get('dealerHand').play();
        };
      })(this));
      this.get('dealerHand').on('stand', (function(_this) {
        return function() {
          return _this.gameEnd();
        };
      })(this));
      return this.get('playerHand').on('lose', (function(_this) {
        return function() {
          return _this.gameEnd(true);
        };
      })(this));
    };

    Game.prototype.gameEnd = function(playerBusts) {
      var dealerScore, gameOverMessage, playerScore;
      if (playerBusts) {
        this.set('playerWins', false);
        this.set('gameOverMessage', 'Player busts, dealer wins :(');
      } else {
        playerScore = this.get('playerHand').score();
        dealerScore = this.get('dealerHand').score();
        if (playerScore > dealerScore || dealerScore > 21) {
          gameOverMessage = 'Player wins!';
          this.set('playerWins', true);
        } else if (playerScore < dealerScore) {
          gameOverMessage = 'Dealer wins';
          this.set('playerWins', false);
        } else {
          gameOverMessage = 'tie...?';
        }
        this.set('gameOverMessage', gameOverMessage);
      }
      return this.trigger('gameEnd');
    };

    return Game;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=Game.map
